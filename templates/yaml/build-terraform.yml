parameters:
  - name: name
    default: ""
  - name: displayName
    default: ""
  - name: agentPool
    default: ""
  - name: environmentVariableGroup
    default: ""
  - name: serviceConnection
    default: ""
  - name: stateServiceConnection
    default: ""
  - name: environment
    default: ""
  - name: landingZone
    default: ""
  - name: dependsOn
    type: object
    default: []
  - name: environmentVariables
    type: object
    default: {}
  - name: location
    default: ""
  - name: terraformVars
    default: ""

jobs:
  - job: "BuildTerraform"
    displayName: "Build Terraform"
    dependsOn: ${{ parameters.dependsOn }}
    pool:
      vmImage:  ${{ parameters.agentPool }}
    variables: 
    - template: ../../${{ parameters.landingZone  }}/yaml/state.yml
      parameters:
        environment: ${{ parameters.environment }}
        landingZone: ${{ parameters.landingZone }}
    steps:
      - task: DeleteFiles@1
        inputs:
          SourceFolder: '$(Pipeline.Workspace)/terraform/'
          Contents: |
           *
      
      - publish: ""
        displayName: "Publish Terraform Artifact"
        artifact: "terraform"
      
      - download: current
        artifact: "terraform"
        displayName: "Download Terraform Artifact"

      - script: |
           chmod +x ./templates/tests/scripts/tf-install.sh
           make tf-install 
        displayName: 'Install Terraform'
 
      
      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ parameters.stateServiceConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            chmod +x ./templates/tests/scripts/azp-backend.sh
            SC_NAME=${{ variables.stateStorageAccountContainerName }} \
            SA_NAME=${{ variables.stateStorageAccountName }} \
            DEFAULT_PREFIX=${{ variables.stateResourceGroupName }} \
            PRIMARY_LOCATION="${{ parameters.location  }}" \
            SUBSCRIPTION_ID=${{ variables.stateSubscriptionId }} \
            make azp-backend
        displayName: 'Configure Azure Backend'

      - task: AzureCLI@2
        name: set_variables
        displayName: Configure Variables
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          addSpnToEnvironment: true
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            Write-Host "##vso[task.setvariable variable=ARM_USE_OIDC]true"
            Write-Host "##vso[task.setvariable variable=ARM_OIDC_TOKEN]$env:idToken"
            Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
            Write-Host "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query id -o tsv)"
            Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$env:tenantId"
  
      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
              chmod +x ./templates/tests/scripts/tf-init.sh
              TFSTATE_FILE=state \
              STORAGE_ACCOUNT_NAME=${{ variables.stateStorageAccountName }} \
              STORAGE_ACCOUNT_RSG_NAME=${{ variables.stateResourceGroupName }} \
              CONTAINER_NAME=${{ variables.stateStorageAccountContainerName }} \
              SUBSCRIPTION_ID=${{ variables.stateSubscriptionId }} \
              PIPELINE_WORKSPACE=$(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform \
              make tf-init       
        displayName: 'Terraform Init'
  
      
      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
              chmod +x ./templates/tests/scripts/tf-plan.sh
              PIPELINE_WORKSPACE=$(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform \
              PIPELINE_ENVIRONMENT=${{ parameters.environment }} \
              PIPELINE_VARIABLES=${{ parameters.terraformVars }} \
              make tf-plan 
        displayName: 'Terraform Plan'

   
#############################################################################################################
#
## Checkov task
#
#############################################################################################################

      - task: Bash@3
        inputs:
          workingDirectory: $(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform
          targetType: 'inline'
          script: |
              sudo apt-get update
              sudo apt-get install -y python3 python3-pip
              pip3 install checkov
              export PATH=$PATH:/home/AzDevOps/.local/bin
              checkov --version
        displayName: 'Install and Verify Checkov'

      
      
      - task: CmdLine@2
        inputs:
          script: |
            export PATH=$PATH:/home/AzDevOps/.local/bin
            echo Write your commands here
            echo "checkov plan testing started."
            terraform show -json $(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform/plan > $(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform/tf.json
            echo "plan json file created."
            echo "Check checkov version"
          workingDirectory: $(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform
          failOnStderr: true
        displayName: Convert tfplan to json

            
      - task: CmdLine@2
        inputs:
          script: |
            export PATH=$PATH:/home/AzDevOps/.local/bin
            echo Write your commands here
            checkov --skip-check CKV_AZURE_33,CKV2_AZURE_1,CKV_AZURE_93,CKV_AZURE_206,CKV_AZURE_59,CKV2_AZURE_1,CKV_AZURE_93,CKV_AZURE_70  -f $(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform/tf.json -o junitxml > $(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform/checkov-plan-report.xml
            echo "checkov plan testing ended."
          workingDirectory: $(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform
          failOnStderr: false
        displayName: Run checkov on tfplan

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: $(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform/checkov-plan-report.xml
          searchFolder: $(Pipeline.Workspace)/terraform/${{ parameters.landingzone }}/terraform
        displayName: Publish checkov results
